#!/bin/bash

set -eou pipefail

app_name=dtlv
test_name=dtlv-test

if [ -z "$GRAALVM_HOME" ]; then
    echo "Please set GRAALVM_HOME"
    exit 1
fi

export JAVA_HOME=$GRAALVM_HOME
export PATH=$GRAALVM_HOME/bin:$PATH

MAIN_JAR="target/main.uberjar.jar"
TEST_JAR="target/test.uberjar.jar"

NATIVE=`pwd`

cd src/c
make

cd ../../

lein clean
lein uberjar

"$GRAALVM_HOME/bin/native-image" \
    -H:Name=${app_name} \
    -H:+ReportExceptionStackTraces \
    -H:ConfigurationFileDirectories=config \
    -J-Dclojure.spec.skip-macros=true \
    -J-Dclojure.compiler.direct-linking=true \
    -H:Log=registerResource:verbose \
    -H:+PrintClassInitialization \
    -H:CLibraryPath=${NATIVE}/src/c \
    --initialize-at-build-time \
    --report-unsupported-elements-at-runtime \
    --allow-incomplete-classpath \
    --verbose \
    --no-fallback \
    --no-server \
    "-J-Xmx4g" \
    --native-image-info \
    -jar "$MAIN_JAR" \
    ${app_name}

lein with-profile test-uberjar uberjar

"$GRAALVM_HOME/bin/native-image" \
    -H:Name=${test_name} \
    -H:+ReportExceptionStackTraces \
    -H:ConfigurationFileDirectories=config \
    -J-Dclojure.spec.skip-macros=true \
    -J-Dclojure.compiler.direct-linking=true \
    -H:Log=registerResource:verbose \
    -H:+PrintClassInitialization \
    -H:CLibraryPath=${NATIVE}/src/c \
    --initialize-at-build-time \
    --report-unsupported-elements-at-runtime \
    --allow-incomplete-classpath \
    --verbose \
    --no-fallback \
    --no-server \
    "-J-Xmx4g" \
    --native-image-info \
    -jar "$TEST_JAR" \
    ${test_name}
